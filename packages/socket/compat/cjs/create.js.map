{"version":3,"file":"create.js","sources":["../../src/handlePush.js","../../src/notifier/notify.js","../../src/notifier/notifyAll.js","../../src/notifier/find.js","../../src/createPushHandler.js","../../src/notifier/findIndex.js","../../src/notifier/remove.js","../../src/notifier/refresh.js","../../src/updateNotifiers.js","../../src/pushRequest.js","../../src/joinChannel.js","../../src/create.js"],"sourcesContent":["// @flow\n\nimport {Push} from \"phoenix\";\n\nimport type {PushHandler} from \"./types\";\n\nconst handlePush = (push: Push, handler: PushHandler<any>) =>\n  push\n    .receive(\"ok\", handler.onSucceed)\n    .receive(\"error\", handler.onError)\n    .receive(\"timeout\", handler.onTimeout);\n\nexport default handlePush;\n","// @flow\n\nimport type {Event, Notifier} from \"../types\";\n\nconst getNotifier = (handlerName, data) => observer =>\n  observer[handlerName] && observer[handlerName](data);\n\nconst getHandlerName = event => `on${event}`;\n\nconst notify = (notifier: Notifier<any>, event: Event, data: any) =>\n  notifier.observers.forEach(getNotifier(getHandlerName(event), data));\n\nexport default notify;\n","// @flow\n\nimport notify from \"./notify\";\n\nimport type {Event, Notifier} from \"../types\";\n\nconst notifyall = (notifiers: Array<Notifier<any>>, event: Event, data: any) =>\n  notifiers.forEach(notifier => notify(notifier, event, data));\n\nexport default notifyall;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"../types\";\n\nconst find = (notifiers: Array<Notifier<any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.find(hasIn([key], value));\n\nexport default find;\n","// @flow\n\nimport {map} from \"@jumpn/utils-composite\";\n\nimport type {GqlRequest} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport notifierFind from \"./notifier/find\";\n\nimport type {AbsintheSocket, NotifierPushHandler, PushHandler} from \"./types\";\n\nconst createEventHandler = (absintheSocket, request) => handle => (...args) => {\n  const notifier = notifierFind(absintheSocket.notifiers, \"request\", request);\n\n  if (notifier) {\n    handle(absintheSocket, notifier, ...args);\n  }\n};\n\nconst createPushHandler = <Response: Object>(\n  notifierPushHandler: NotifierPushHandler<Response>,\n  absintheSocket: AbsintheSocket,\n  request: GqlRequest<any>\n): PushHandler<Response> =>\n  map(createEventHandler(absintheSocket, request), notifierPushHandler);\n\nexport default createPushHandler;\n","// @flow\n\nimport {hasIn} from \"@jumpn/utils-composite\";\n\nimport type {Notifier} from \"../types\";\n\nconst findIndex = (notifiers: Array<Notifier<any>>, key: string, value: any) =>\n  // $FlowFixMe: flow is having some troubles to match hasIn signature (curry)\n  notifiers.findIndex(hasIn([key], value));\n\nexport default findIndex;\n","// @flow\n\nimport {remove as arrayRemove} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"../types\";\n\nconst remove = (notifier: Notifier<any>) => (notifiers: Array<Notifier<any>>) =>\n  arrayRemove(findIndex(notifiers, \"request\", notifier.request), 1, notifiers);\n\nexport default remove;\n","// @flow\n\nimport {replace as arrayReplace} from \"@jumpn/utils-array\";\n\nimport findIndex from \"./findIndex\";\n\nimport type {Notifier} from \"../types\";\n\nconst refresh = (notifier: Notifier<any>) => (\n  notifiers: Array<Notifier<any>>\n) =>\n  arrayReplace(\n    findIndex(notifiers, \"request\", notifier.request),\n    [notifier],\n    notifiers\n  );\n\nexport default refresh;\n","// @flow\n\nimport type {AbsintheSocket, Notifier} from \"./types\";\n\ntype Notifiers = Array<Notifier<any>>;\n\nconst updateNotifiers = (\n  absintheSocket: AbsintheSocket,\n  updater: (notifiers: Notifiers) => Notifiers\n) => {\n  absintheSocket.notifiers = updater(absintheSocket.notifiers);\n\n  return absintheSocket;\n};\n\nexport default updateNotifiers;\n","// @flow\n\nimport {\n  errorsToString as gqlErrorsToString,\n  requestToCompat\n} from \"@jumpn/utils-graphql\";\n\nimport type {\n  GqlError,\n  GqlResponse\n} from \"@jumpn/utils-graphql/compat/cjs/types\";\n\nimport createPushHandler from \"./createPushHandler\";\nimport handlePush from \"./handlePush\";\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport notifierRefresh from \"./notifier/refresh\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, Notifier, NotifierPushHandler} from \"./types\";\n\ntype SubscriptionResponse =\n  | {|subscriptionId: string|}\n  | {|errors: Array<GqlError>|};\n\nconst notifyStart = notifier => notifierNotify(notifier, \"Start\", notifier);\n\nconst onSubscriptionSucceed = (absintheSocket, notifier, {subscriptionId}) => {\n  const updatedNotifier = {...notifier, subscriptionId};\n\n  updateNotifiers(absintheSocket, notifierRefresh(updatedNotifier));\n\n  notifyStart(updatedNotifier);\n};\n\nconst abortRequest = (absintheSocket, notifier, error) => {\n  updateNotifiers(absintheSocket, notifierRemove(notifier));\n\n  notifierNotify(notifier, \"Abort\", error);\n};\n\nconst onError = (absintheSocket, notifier, errorMessage) =>\n  abortRequest(absintheSocket, notifier, new Error(JSON.stringify(errorMessage)));\n\nconst onSubscriptionResponse = (absintheSocket, notifier, response) => {\n  if (response.errors) {\n    onError(absintheSocket, notifier, gqlErrorsToString(response.errors));\n  } else {\n    onSubscriptionSucceed(absintheSocket, notifier, response);\n  }\n};\n\nconst onQueryOrMutationResponse = (absintheSocket, notifier, response) => {\n  updateNotifiers(absintheSocket, notifierRemove(notifier));\n\n  notifierNotify(notifier, \"Result\", response);\n};\n\nconst onTimeout = (absintheSocket, notifier) =>\n  notifierNotify(notifier, \"Error\", new Error(\"request: timeout\"));\n\nconst queryOrMutationHandler: NotifierPushHandler<GqlResponse<any>> = {\n  onError,\n  onTimeout,\n  onSucceed: onQueryOrMutationResponse\n};\n\nconst subcriptionHandler: NotifierPushHandler<SubscriptionResponse> = {\n  onError,\n  onTimeout,\n  onSucceed: onSubscriptionResponse\n};\n\nconst send = (absintheSocket, request, notifierPushHandler) =>\n  handlePush(\n    absintheSocket.channel.push(\"doc\", requestToCompat(request)),\n    createPushHandler(notifierPushHandler, absintheSocket, request)\n  );\n\nconst pushRequest = (\n  absintheSocket: AbsintheSocket,\n  notifier: Notifier<any>\n) => {\n  if (notifier.operationType === \"subscription\") {\n    send(absintheSocket, notifier.request, subcriptionHandler);\n  } else {\n    notifyStart(notifier);\n    send(absintheSocket, notifier.request, queryOrMutationHandler);\n  }\n};\n\nexport default pushRequest;\n","// @flow\n\nimport handlePush from \"./handlePush\";\nimport notifierNotifyAll from \"./notifier/notifyAll\";\nimport pushRequest from \"./pushRequest\";\n\nimport type {AbsintheSocket} from \"./types\";\n\n// join Push is reused and so the handler\n// https://github.com/phoenixframework/phoenix/blob/master/assets/js/phoenix.js#L356\nconst createChannelJoinHandler = absintheSocket => ({\n  onError: (errorMessage: string) =>\n    notifierNotifyAll(\n      absintheSocket.notifiers,\n      \"Error\",\n      new Error(`channel join: ${errorMessage}`)\n    ),\n\n  onSucceed: () =>\n    absintheSocket.notifiers.forEach(notifier =>\n      pushRequest(absintheSocket, notifier)\n    ),\n\n  onTimeout: () =>\n    notifierNotifyAll(\n      absintheSocket.notifiers,\n      \"Error\",\n      new Error(\"channel join: timeout\")\n    )\n});\n\nconst joinChannel = (absintheSocket: AbsintheSocket) => {\n  handlePush(\n    absintheSocket.channel.join(),\n    createChannelJoinHandler(absintheSocket)\n  );\n\n  absintheSocket.channelJoinCreated = true;\n\n  return absintheSocket;\n};\n\nexport default joinChannel;\n","// @flow\n\nimport {Socket as PhoenixSocket} from \"phoenix\";\n\nimport type {Message} from \"phoenix\";\n\nimport joinChannel from \"./joinChannel\";\nimport notifierFind from \"./notifier/find\";\nimport notifierNotify from \"./notifier/notify\";\nimport notifierRemove from \"./notifier/remove\";\nimport updateNotifiers from \"./updateNotifiers\";\n\nimport type {AbsintheSocket, SubscriptionPayload} from \"./types\";\n\nconst createConnectionCloseError = () => new Error(\"connection: close\");\n\nconst mutationOnConnectionClose = (absintheSocket, notifier) => {\n  updateNotifiers(absintheSocket, notifierRemove(notifier));\n\n  notifierNotify(notifier, \"Abort\", createConnectionCloseError());\n};\n\nconst notifierOnConnectionClose = absintheSocket => notifier => {\n  if (notifier.operationType === \"mutation\") {\n    mutationOnConnectionClose(absintheSocket, notifier);\n  } else {\n    notifierNotify(notifier, \"Error\", createConnectionCloseError());\n  }\n};\n\nconst onConnectionClose = absintheSocket => () =>\n  absintheSocket.notifiers.forEach(notifierOnConnectionClose(absintheSocket));\n\nconst onSubscriptionData = (\n  absintheSocket: AbsintheSocket,\n  {payload}: Message<SubscriptionPayload<any>>\n) => {\n  const notifier = notifierFind(\n    absintheSocket.notifiers,\n    \"subscriptionId\",\n    payload.subscriptionId\n  );\n\n  if (notifier) {\n    notifierNotify(notifier, \"Result\", payload.result);\n  }\n};\n\nconst onMessage = absintheSocket => (response: Message<>) => {\n  if (response.event === \"subscription:data\") {\n    onSubscriptionData(absintheSocket, response);\n  }\n};\n\nconst shouldJoinChannel = absintheSocket =>\n  !absintheSocket.channelJoinCreated && absintheSocket.notifiers.length > 0;\n\nconst onConnectionOpen = absintheSocket => () => {\n  if (shouldJoinChannel(absintheSocket)) {\n    joinChannel(absintheSocket);\n  }\n};\n\nconst absintheChannelName = \"__absinthe__:control\";\n\n/**\n * Creates an Absinthe Socket using the given Phoenix Socket instance\n *\n * @example\n * import * as AbsintheSocket from \"@absinthe/socket\";\n * import {Socket as PhoenixSocket} from \"phoenix\";\n\n * const absintheSocket = AbsintheSocket.create(\n *   new PhoenixSocket(\"ws://localhost:4000/socket\")\n * );\n */\nconst create = (phoenixSocket: PhoenixSocket): AbsintheSocket => {\n  const absintheSocket: AbsintheSocket = {\n    phoenixSocket,\n    channel: phoenixSocket.channel(absintheChannelName),\n    channelJoinCreated: false,\n    notifiers: []\n  };\n\n  phoenixSocket.onOpen(onConnectionOpen(absintheSocket));\n  phoenixSocket.onMessage(onMessage(absintheSocket));\n  phoenixSocket.onClose(onConnectionClose(absintheSocket));\n\n  return absintheSocket;\n};\n\nexport default create;\n"],"names":["handlePush","push","handler","receive","onSucceed","onError","onTimeout","getNotifier","handlerName","data","observer","getHandlerName","event","notify","notifier","observers","forEach","notifyall","notifiers","find","key","value","hasIn","createEventHandler","absintheSocket","request","args","notifierFind","createPushHandler","notifierPushHandler","map","findIndex","remove","arrayRemove","refresh","arrayReplace","updateNotifiers","updater","notifyStart","notifierNotify","onSubscriptionSucceed","subscriptionId","updatedNotifier","notifierRefresh","abortRequest","error","notifierRemove","errorMessage","Error","_JSON$stringify","onSubscriptionResponse","response","errors","gqlErrorsToString","onQueryOrMutationResponse","queryOrMutationHandler","subcriptionHandler","send","channel","requestToCompat","pushRequest","operationType","createChannelJoinHandler","notifierNotifyAll","joinChannel","join","channelJoinCreated","createConnectionCloseError","mutationOnConnectionClose","notifierOnConnectionClose","onConnectionClose","onSubscriptionData","payload","result","onMessage","shouldJoinChannel","length","onConnectionOpen","absintheChannelName","create","phoenixSocket","onOpen","onClose"],"mappings":"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"}